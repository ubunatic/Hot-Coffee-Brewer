###
Copyright (c) 2011 Uwe Jugel

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	Hot Coffee Brewer
	=================
	
	This file is compile.co a part of the Hot Coffee Brewer
	
	- is compiled via hotcoffee.js
	- is used to compile *.co files in src to *.js files in lib
	- runs in node.js in Linux and Windows (no dependencies)
	
	https://github.com/ubunatic/Hot-Coffee-Brewer

###

# tasks: all, test
build = (task, buildfiles = []) ->
	coffee = require("./tools/coffee.js").CoffeeScript				# load coffee compiler
	REX    = require("./tmp_comatch.js").CoRegex					# load prebuilt matches
	CHK    = require("./tmp_cocheck.js").CoCheck					# load prebuilt checks
	cotest = require("./tmp_cotest.js")								# load prebuilt hotcoffe tester
	config =
		editor: "Gedit"												# supported: "Gedit"; planned: "NotepadPP", "Eclipse"
		logWrites: no
		formatErrors: no
	
	fs = require "fs"
	#test 

	src2lib = (file, keepFileName=false) ->
		prefix = file.match(REX.match_srcpath)						# check if folder is like "./src/..."
		
		if !prefix then prefix = "" else prefix = prefix[0]			# save src prefix
		
		file = prefix.replace("src","lib") + file.replace(REX.match_srcpath, "") # replace src with lib
		if keepFileName
			file = file.replace(REX.match_coext, ".js")				# replace extension
		else
			file = file.replace(REX.match_cofile, "")				# remove fileame
		return file
		
	string2files = (string) ->
		(file for file in (string.split "\n") when file.trim() != "")
		
	findCoffeeFiles = (dirname, files) ->							# savely find all .co file in a dir
		dir = fs.readdirSync(dirname)
		
		for file in dir then do ->
			statFile = file
			stats = fs.statSync dirname+"/"+statFile
			if stats.isDirectory()
				findCoffeeFiles( dirname+"/"+statFile, files )
			else if stats.isFile() && statFile.match(/\.co$/)
				files.push(dirname+"/"+statFile)

	updir_count = 0
	findSrcDir = (dirname) ->										# savely find ./src dir
		try
			dir = fs.readdirSync dirname+"/src"
			return dirname
		catch error
			if updir_count > 100
				console.log "'src' dir not found"
				process.exit()
			else
				updir_count++
				return findSrcDir(dirname+"/..")

	mkdir = (path) ->												# savely create target dirs
		mkdir_p = (parts, idx) ->
			if parts.length > idx
				try
					subpath = parts[0..idx].join("/")
					dirExists = false
					try	dirExists = fs.statSync(subpath).isDirectory()

					if !dirExists
						#console.log "creating: #{subpath}"
						fs.mkdirSync subpath, 0777
						
					mkdir_p parts, idx+1
						
				catch error
					console.log error.message
		
		mkdir_p path.split("/"), 0

	padString = (string, maxLength, padChar=" ") ->					# generate padding for a string + maxLength
		(padChar for char in [1..Math.max(maxLength-string.length,0)]).join("")
		
	path2edit = (path) ->											# format output for editors
		switch config.editor
			when "Gedit" then path.replace("./","")
		
	compileFile = (file) ->
		pad = padString(file.trgFile, 30)

		try
			cofile = fs.readFileSync(file.srcFile, "UTF8")				# read .co source
			jsfile = coffee.compile( cofile )						# create JavaScript string
			#console.log "creating dir: #{file.trgDir}"				# create target dirs
			mkdir(file.trgDir)

			fs.writeFileSync(file.trgFile, jsfile )					# save JavaScript file
			
			file.error = false
			
			console.log "#{path2edit(file.trgFile)}:#{pad} written." if config.logWrites
			
		catch error
			regex_match_linenumber = /line\s*\d*\:/
			file.error = true
			msg = error.message
			try
				line = msg.match(regex_match_linenumber)[0].replace(/line\s*/,"").replace(":","")
				msg = msg.replace(regex_match_linenumber, "")
						.replace(/Parse\serror\son\s*/,"")
						.replace(/Error:\sIn\s*/, "")

				console.error "#{path2edit(file.srcFile)}:#{line}:#{pad.substr(line.length)} #{msg}"
			catch error
				console.error "#{path2edit(file.srcFile)}:#{pad} Unexpected compile error:\n #{ error.message }", error

		#exec "coffee -o #{ file.trgDir } -c #{ file.srcFile }", (error, stdout, stderr) ->
		#	if error

		#errorInfo = error.message.match(/\s*Error.*In.*line.*\n/)[0]
		#errorFile = errorInfo.replace(/\s*Error.*In\s*/,"").split(",")[0]
		#errorLine = errorInfo.split(":")[1].replace(/.*line\s*/,"")
		#errorText = errorInfo.split(":")[2]

		#console.log errorFile+":"+errorLine+":"+errorText
	
	runTest = (file) ->
		jsfile = src2lib(file, true)
		tmpCompile = ""
		cofile = ""
		isFile = false

		try #recompile the cofile to test for compile errors
			if cofile = fs.readFileSync(file, "UTF8")
				tmpCompile = coffee.compile( cofile )
		catch error

		try isFile = fs.statSync(jsfile).isFile()
		catch error
		
		if tmpCompile == "" && cofile != ""
			console.error "compile.runTest: compile error in #{file}. Test stopped."
		else if !isFile
			console.error "compile.runTest: #{jsfile} not found. Test stopped."
		else
			cotest.test jsfile
		

	cofiles = []
	findCoffeeFiles(findSrcDir("."), cofiles)

	files = (file for file in cofiles when !CHK.isBuildFile(file))

	filemap_all = ({ srcFile: file, trgDir: src2lib(file), trgFile: src2lib(file, true) } for file in files)
	
	excludemap = (baditem for baditem in filemap_all when baditem.trgFile == baditem.srcFile)
	if excludemap.length > 0
		filemap = (item for item in filemap_all when not item in excludemap)
		console.log "Removed #{filemap.length-excludemap.length} items from file list to prevent overwrites."
	else
		filemap = filemap_all

	#console.log filemap

	switch task
		when "all"
			for file in filemap
				compileFile file
		when "test"
			runTest(buildfiles[0])

	
test = (cofile) ->
	build "test", [cofile]

buildAll = ->
	build "all"

module.exports.buildAll = buildAll
module.exports.test = test
